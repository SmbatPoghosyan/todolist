{"version":3,"sources":["Components/Header.js","Components/Todoitem.js","Components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","state","toDoItemValue","setState","target","value","handleAddButonClick","trim","handleAddItem","theme","createMuiTheme","palette","primary","green","typography","useNextVariants","classes","react_default","a","createElement","className","styles","TextField_default","margin","label","variant","id","onChange","Button_default","color","onClick","Component","withStyles","spacing","unit","Todoitem","done","onRemoveButtonClick","todoItemName","handleRemoveItem","backgrounColor","index","xColor","concat","check","index_es","icon","type","aria-label","style","library","add","faCheckCircle","faTimes","Todolist","todoList","map","todoItem","Todoitem_Todoitem","key","App","indexOf","push","splice","Components_Header","Todolist_Todolist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a200f38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Button from '@material-ui/core/Button';\nimport {withStyles, MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport green from '@material-ui/core/colors/green';\nconst styles = theme => ({\n    margin: {\n        margin: theme.spacing.unit,\n    }\n})\n\n\nclass Header extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            toDoItemValue: '',\n        }\n    }\n\n\n\n    handleChange = e => {\n        if(this.state.toDoItemValue === ''){\n        }\n        this.setState({ toDoItemValue: e.target.value})\n    }\n\n    handleAddButonClick = () => {\n        const { toDoItemValue } = this.state;\n        if(toDoItemValue.trim()){\n            this.props.handleAddItem(toDoItemValue);\n            this.setState({\n                toDoItemValue: ''\n            })\n        }\n    }\n\n    render() {\n        const theme = createMuiTheme({\n            palette: {\n                primary: green,\n            },\n            typography: { useNextVariants: true },\n        });\n        const { classes } = this.props;\n\n        return (\n            <div className=\"navbar row navbar-dark bg-info align-items-center\">\n            <p className='h1 text-warning col-lg-4'>My To Do List</p>\n                <div className='col-lg-4'><MuiThemeProvider theme={theme}>\n                    <TextField\n                        className={classes.margin}\n                        label=\"What do I need to do...\"\n                        variant=\"outlined\"\n                        id=\"mui-theme-provider-outlined-input\"\n                        value={this.state.toDoItemValue} onChange={this.handleChange}\n                    />\n                </MuiThemeProvider></div>\n              <div className='col-lg-4'><Button variant=\"contained\" color=\"primary\" className='float-left col-lg-4'  onClick={this.handleAddButonClick}>Add</Button></div>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(Header);\n","import React, {Component} from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\nexport default class Todoitem extends Component {\n\n    state = {\n        done: false\n    }\n\n    onRemoveButtonClick = (e) => {\n        const { todoItemName} = this.props;\n        const { handleRemoveItem} = this.props;\n        handleRemoveItem(todoItemName);\n    }\n\n    done = () => {\n        this.setState({\n            done: !this.state.done\n        })\n    }\n\n\n\n    render(){\n        const backgrounColor = this.props.index % 2 === 0 ? 'bg-light' : 'bg-secondary text-white';\n        let todoItemTextClass = \"text-uppercase\";\n        let xColor = this.props.index % 2 !== 0 || this.state.done ? 'white' : '#290033';\n        let todoItemName = this.state.done ? <del className={todoItemTextClass}>{this.props.todoItemName}</del> : <span className={todoItemTextClass}>{this.props.todoItemName}</span>;\n        let className = this.state.done ? \"navbar row navbar-dark bg-dark align-items-center text-white\" : ` navbar row navbar-light ${backgrounColor} align-items-center`;\n        let check = this.state.done ? <FontAwesomeIcon className='float-left' icon=\"check-circle\"/> : ''; // eslint-disable-next-line\n        return <a onClick={this.done} className={className}>\n            <div className='col-lg-4'>{check}</div>\n            <div className='col-lg-4'>{todoItemName}</div>\n            <div className='col-lg-4'><button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.onRemoveButtonClick}><span style={{color: xColor}}><FontAwesomeIcon icon='times'  /></span></button></div></a>\n    }\n\n}\n\nlibrary.add(faCheckCircle)\nlibrary.add(faTimes)","import React, {Component} from 'react'\nimport Todoitem from \"./Todoitem\";\n\nexport default class Todolist extends Component {\n\n\n    render(){\n        const { handleRemoveItem } = this.props;\n        const { todoList } = this.props;\n        return (<div>\n                {todoList.map((todoItem,index) => <Todoitem index={index} handleRemoveItem={handleRemoveItem} key={todoItem} todoItemName={todoItem}/>)}\n            </div>\n\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./Components/Header\";\nimport Todolist from \"./Components/Todolist\";\n\nclass App extends Component {\n  state = {\n      todoList: ['Do homework', 'Do exersices', 'Go shop']\n  };\n\n  handleAddItem = (todoItemName) => {\n    const { todoList } = this.state;\n    if(todoList.indexOf(todoItemName) === -1 ) {\n        todoList.push(todoItemName);\n        this.setState({todoList: todoList})\n    }\n  };\n\n  handleRemoveItem = (todoItemName) => {\n      const { todoList } = this.state;\n      todoList.splice(todoList.indexOf(todoItemName), 1);\n      this.setState ({todoList});\n  }\n\n  render() {\n\n      return (\n      <div className=\"App\">\n        <Header handleAddItem={this.handleAddItem}/>\n        <Todolist handleRemoveItem={this.handleRemoveItem} todoList={ this.state.todoList }/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}